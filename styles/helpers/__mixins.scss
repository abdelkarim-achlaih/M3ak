// Use these mixins only between the specified breakpoints
@use "sass:string";
@use 'sass:list';

@mixin breakpoints_xs() {
  @media (max-width: 575px) {
    @content;
  }
}

@mixin breakpoints_sm() {
  @media (min-width: 576px) and (max-width: 767) {
    @content;
  }
}

@mixin breakpoints_md() {
  @media (min-width: 768px) and (max-width: 991) {
    @content;
  }
}

@mixin breakpoints_lg() {
  @media (min-width: 992px) and (max-width: 1199) {
    @content;
  }
}

@mixin breakpoints_xl() {
  @media (min-width: 1200px) and (max-width: 1399) {
    @content;
  }
}

@mixin breakpoints_xxl() {
  @media (min-width: 1400px) {
    @content;
  }
}

//  Use this mixin for the specified breakpoints and bellow

@mixin breakpoints($point) {
  @if($point ==xs) {
    @media (max-width: 575px) {
      @content;
    }
  }

  @if($point ==sm) {
    @media (max-width: 767px) {
      @content;
    }
  }

  @if($point ==md) {
    @media (max-width: 991px) {
      @content;
    }
  }

  @if($point ==lg) {
    @media (max-width: 1199px) {
      @content;
    }
  }

  @if($point ==xl) {
    @media (max-width: 1399px) {
      @content;
    }
  }

  @if($point ==xxl) {
    @media (min-width: 1400px) {
      @content;
    }
  }
}

@mixin font-size($base) {
  @include breakpoints('xxl') {
    font-size: $base;
  }

  @include breakpoints('xl') {
    font-size: calc($base - 0.45vw);
  }
}

//  Use this mixin for responsive breakpoints
$breakpoints: (
  // xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1400px
);

@mixin responsive-font-size($font-sizes: (xxl: (h1: 40px,
      h2: 32px,
      h3: 28px,
      h4: 24px,
      h5: 20px,
      h6: 16px,
      p: 20px,
      div: 20px,
      a: 16px,
      li: 16px,
      button: 16px),
    xs: (h1: 32px,
      h2: 24px,
      h3: 20px,
      h4: 18px,
      h5: 16px,
      h6: 14px,
      p: 16px,
      a: 16px,
      div: 16px,
      li: 16px,
      button: 16px))) {

  // Font sizes for xxl screens
  @media (min-width: map-get($breakpoints, xxl)) {

    @each $element,
    $size in map-get($font-sizes, xxl) {
      #{$element} {
        font-size: $size;
      }
    }
  }

  // Font sizes for other breakpoints
  @each $breakpoint,
  $sizes in $font-sizes {
    @if $breakpoint !=xxl {
      $prev-breakpoint: null;
      $prev-sizes: null;

      // Find the previous breakpoint
      @each $b,
      $s in $font-sizes {
        @if $b !=$breakpoint and $b !=sm and ($prev-breakpoint ==null or $b > $prev-breakpoint) {
          $prev-breakpoint: $b;
          $prev-sizes: $s;
        }
      }

      @media (min-width: map-get($breakpoints, $breakpoint)) {

        @each $element,
        $size in $sizes {
          $prev-size: map-get($prev-sizes, $element);
          $size: calc(#{$prev-size} + ($size - $prev-size) * ((100vw - #{map-get($breakpoints, $prev-breakpoint)}) / (#{map-get($breakpoints, $breakpoint)} - #{map-get($breakpoints, $prev-breakpoint)})));

          #{$element} {
            font-size: $size;
          }
        }
      }
    }
  }
}

@function get-index-from-value($list, $value) {
  @for $i from 1 through length($list) {
    @if nth($list, $i)==$value {
      @return $i;
    }
  }

  @return null; // If value not found
}

@function concatenate-list($list, $separator) {
  $result: "";
  $list-length: length($list);

  @for $i from 1 through $list-length {
    $item: nth($list, $i);
    $result: $result +$item;

    @if $i !=$list-length {
      $result: $result +$separator;
    }
  }

  @return unquote($result);
}

$breaks: (
  // xs: 0,
  sm: 576,
  md: 768,
  lg: 992,
  xl: 1200,
  xxl: 1400
);
$xxl-breakpoint: map-get($breakpoints, xxl);

$sm-breakpoint: map-get($breakpoints, sm);

@mixin responsive($xxl-values, $sm-values, $property-name) {

  @media (max-width: $sm-breakpoint) {
    #{$property-name}: #{concatenate-list($sm-values, " ")};
  }

  @each $breakpoint_name,
  $breakpoint_value in $breakpoints {
    $breakpoint-sizes: ();
    $break: map-get($breaks, $breakpoint_name);

    @each $xxl-value in $xxl-values {
      $sm-value: nth($sm-values, get-index-from-value($xxl-values, $xxl-value));
      // $breakpoint-size: calc(#{$xxl-value} + (($sm-value - $xxl-value) * ((#{$break} - #{map-get($breaks, xxl)}) / (#{$break} - #{map-get($breaks, sm)})))); Old not working
      // $breakpoint-size: $sm-value * (#{map-get($breaks, xxl)} - #{$break}) + $xxl-value * (#{$break} - #{map-get($breaks, sm)}); Tooooooop
      // $breakpoint-size: #{map-get($breaks, xxl)} - #{map-get($breaks, sm)}; Botooooooooooom
      $breakpoint-size: calc(($sm-value * (map-get($breaks, xxl) - $break) + $xxl-value * ($break - map-get($breaks, sm)))/(map-get($breaks, xxl) - map-get($breaks, sm)));

      $breakpoint-sizes: append($breakpoint-sizes, $breakpoint-size);
    }

    $result: concatenate-list($breakpoint-sizes, " ");

    @media (min-width: $breakpoint_value) {
      // /*#{$breakpoint_name} -- Breakpoint*/
      // --#{$property-name}: #{$result};
      // #{$property-name}: var(--#{$property-name});
      #{$property-name}: #{$result};
    }
  }
}