// Use these mixins only between the specified breakpoints
@use "sass:string";
@use 'sass:list';

@mixin breakpoints_xs() {
  @media (max-width: 575px) {
    @content;
  }
}

@mixin breakpoints_sm() {
  @media (min-width: 576px) and (max-width: 767) {
    @content;
  }
}

@mixin breakpoints_md() {
  @media (min-width: 768px) and (max-width: 991) {
    @content;
  }
}

@mixin breakpoints_lg() {
  @media (min-width: 992px) and (max-width: 1199) {
    @content;
  }
}

@mixin breakpoints_xl() {
  @media (min-width: 1200px) and (max-width: 1399) {
    @content;
  }
}

@mixin breakpoints_xxl() {
  @media (min-width: 1400px) {
    @content;
  }
}

//  Use this mixin for the specified breakpoints and bellow

@mixin breakpoints($point) {
  @if($point ==xs) {
    @media (max-width: 575px) {
      @content;
    }
  }

  @if($point ==sm) {
    @media (max-width: 767px) {
      @content;
    }
  }

  @if($point ==md) {
    @media (max-width: 991px) {
      @content;
    }
  }

  @if($point ==lg) {
    @media (max-width: 1199px) {
      @content;
    }
  }

  @if($point ==xl) {
    @media (max-width: 1399px) {
      @content;
    }
  }

  @if($point ==xxl) {
    @media (min-width: 1400px) {
      @content;
    }
  }
}

@mixin font-size($base) {
  @include breakpoints('xxl') {
    font-size: $base;
  }

  @include breakpoints('xl') {
    font-size: calc($base - 0.45vw);
  }
}

//  Use this mixin for responsive Properties
$breakpoints: (
  // xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1400px
);

@function get-index-from-value($list, $value) {
  @for $i from 1 through length($list) {
    @if nth($list, $i)==$value {
      @return $i;
    }
  }

  @return null; // If value not found
}

@function concatenate-list($list, $separator) {
  $result: "";
  $list-length: length($list);

  @for $i from 1 through $list-length {
    $item: nth($list, $i);
    $result: $result +$item;

    @if $i !=$list-length {
      $result: $result +$separator;
    }
  }

  @return unquote($result);
}

$breaks: (
  // xs: 0,
  sm: 576,
  md: 768,
  lg: 992,
  xl: 1200,
  xxl: 1400
);
$xxl-breakpoint: map-get($breakpoints, xxl);

$sm-breakpoint: map-get($breakpoints, sm);

@mixin responsive($xxl-values, $sm-values, $property-name, $mobile-values: $sm-values) {

  @media (max-width: $sm-breakpoint) {
    #{$property-name}: #{concatenate-list($mobile-values, " ")};
  }

  @each $breakpoint_name,
  $breakpoint_value in $breakpoints {
    $breakpoint-sizes: ();
    $break: map-get($breaks, $breakpoint_name);

    @each $xxl-value in $xxl-values {
      $sm-value: nth($sm-values, get-index-from-value($xxl-values, $xxl-value));
      // $breakpoint-size: calc(#{$xxl-value} + (($sm-value - $xxl-value) * ((#{$break} - #{map-get($breaks, xxl)}) / (#{$break} - #{map-get($breaks, sm)})))); Old not working
      // $breakpoint-size: $sm-value * (#{map-get($breaks, xxl)} - #{$break}) + $xxl-value * (#{$break} - #{map-get($breaks, sm)}); Tooooooop
      // $breakpoint-size: #{map-get($breaks, xxl)} - #{map-get($breaks, sm)}; Botooooooooooom
      $breakpoint-size: calc(($sm-value * (map-get($breaks, xxl) - $break) + $xxl-value * ($break - map-get($breaks, sm)))/(map-get($breaks, xxl) - map-get($breaks, sm)));

      $breakpoint-sizes: append($breakpoint-sizes, $breakpoint-size);
    }

    $result: concatenate-list($breakpoint-sizes, " ");

    @media (min-width: $breakpoint_value) {
      // /*#{$breakpoint_name} -- Breakpoint*/
      // --#{$property-name}: #{$result};
      // #{$property-name}: var(--#{$property-name});
      #{$property-name}: #{$result};
    }
  }
}

// Use this mixin for responsive-font-size

@mixin responsive-font-size() {

  $elements: (h1: (40px, 26px),
    h2: (32px, 20px),
    h3: (28px, 18px),
    h4: (24px, 16px),
    // h5: (20px, 16px),
    // h6: (16px, 14px),
    p: (20px, 15px),
    div: (20px, 16px),
    a: (16px, 15px),
    li: (16px, 15px),
    button: (20px, 14px));

  @each $element,
  $values in $elements {
    #{$element} {
      @include responsive(nth($values, 1), nth($values, 2), font-size);
    }
  }
}